#include <stdio.h>
// библиотека стандартного ввода-вывода
#include <math.h>
// библиотека математических функций
//
#include "Task.hpp" // включен текст заголовочного файла
#define N 10 // объявление длины массива


// функция вывода массива произвольной длины
void Print_mas(int mas[],int len) // параметры – имя и длина
{
int i;
printf("\nМассив:\n");
for(i=0;i<len; ++i)
	printf("%5d ", mas[i]);
printf("\n");
}


int Sum1(int *mas, int len)
{
int i;
int Sum=0;
for(i=0; i<len; i++)
{Sum+=mas[i];//printf("%d ",Sum);
}
return Sum;
}

int Sum2(int *mas, int len)
{
int *ip;
int Sum=0;
for(ip=mas; ip<mas+len; ip++)
Sum+=*ip;
return Sum;
}

int Sum3(int *mas, int len)
{
int i;
int Sum;
for(i=0, Sum=0; i<len; i++)
Sum+=*(mas+i);
return Sum;
}

void Out(int *mas, int len)
{
int i;
int *ip;
for(ip=mas, i=0; ip<mas+len; ip++, i++)
printf("Номер=%d Адрес=%p\n", i++, ip);
}

int Max1(int mas[], int len)
{
int i;
int max; // наибольшее значение
// пусть первый элемент наибольший
max=mas[0];
for(i=0; i<len; i++)
if(mas[i]>max) max=mas[i];
// запоминаем наибольшее значение
return max; // возвращаем найденное значение
}

void Del(int mas[], int &len)
{
int i; // рабочая переменная для поиска
int j; // рабочая переменная для удаления
for(i=0; i<len; ) // приращение параметра изъято
{
//if(mas[i]<0) // элемент должен быть удален
if(i==39)
{
for(j=i; j<len-1; j++)
mas[j]=mas[j+1];
len--; // уменьшение длины по завершении цикла
}
else
i++; // переход к следующему поиску,
} // если не было удаления
}

void Circle_Mas(int mas[], int len)
{
// переменная tmp запомнит значение последнего
// элемента
int tmp=mas[len-1];
// сдвиг массива вправо
for(int i=len-1; i>0; i--)
mas[i]=mas[i-1];
mas[0]=tmp;
// запомненный элемент записывается вперед
}

int New_mas(int mas[],int len, int *mas_new, int &len_new)
{
len_new=0;
// в новом массиве нет значений
// прямой поиск положительных элементов
for(int i=0; i<len; i++)
if(mas[i]>0)
// положительный элемент найден
mas_new[len_new++]=mas[i];
return len_new;
}


float R(float x1, float y1, float x2,float y2)
{
return sqrt(pow(x1-x2, 2.)+pow(y1-y2, 2.));
}

// формальные параметры – имя массива (указатель)
// и длина массива
void Transform_mas(int *mas, int len)
// длина не изменяется, len – ее значение
{
int i;
for(i=0; i<len; i++)
mas[i]=mas[i]*2;
}

void Input_mas(int *mas, int &len)
// длина массива изменяется, &len – ссылка
{
int *ip;
// для адресации используется указатель на элемент массива
printf("Введите количество элементов массива \n");
scanf("%d", &len);

printf("Введите элементы массива \n");
for(ip=mas; ip<mas+len; ip++)
	scanf("%5d", ip); // & не нужен
}


int main(void)
{

printf("\n=======\n");

// объявление и инициализация массива а
int a[]={1, -2, 3, -4, 5, -6};
int na=sizeof(a)/sizeof(int); // длина массива
Print_mas(a, na); // вывод массива на печать
// изменим значения элементов массива
Transform_mas(a, na);
// покажем, что они изменились
//
Print_mas(a, na); 	// массив условно переменной длины
int b[N]; 		// выделена память для N элементов массива b.
int nb=0; 		// реальная длина массива b<N
printf("Длина массива должна быть < %d", N);
			// ввод значений массива b
Input_mas(b, nb); 	// длина будет определена при вводе 
			// Вычислим сумму элементов массива с помощью трех
			// функций, использующих различные способы адресации.
printf("Прямая адресация: Sum1=%d\n", Sum1(b, nb));
printf("Косвенная адресация: Sum2=%d\n", Sum2(b, nb));
printf("Косвенная адресация: Sum3=%d\n", Sum3(b, nb));
// покажем сходство и различие механизмов адресации:
Out(b, nb);
// найдем наибольший элемент массива b:
printf("Номер=%d, З начение=%d\n", Max1(b, nb), b[Max1 (b,nb)]);
// удалим из массива а отрицательные элементы
Del(a, na);
// покажем, что осталось.
printf("Массив после удаления:\n");
Print_mas(a, na);
// выполним циклический сдвиг в массиве b:
Circle_Mas(b, nb);
printf("Массив после сдвига:\n");
Print_mas(b, nb);
//Многократное выполнение циклического сдвига
for(int C=1; C<=3; C++) // C – обычный счетчик
Circle_Mas(b, nb);
printf("Массив после сдвига:\n");
Print_mas(b, nb);
// объявим новый массив и проинициализируем его
int d[5]={-1, 1, -2, 2, -3};
// объявим новый массив, длина которого не более 5
int c[5];
int nc; // реальная длина нового массива
// получим новый массив
// из положительных элементов массива d
// функция дважды возвращает длину массива
nc=New_mas(d, 5, c, nc);
if(nc!=0) // длина нового массива больше 0,
// массив получен
{
printf("Новый массив:\n");
Print_mas(c, nc);
}
else
printf ("Массива нет\n");
// обращение к функции с элементами массива
// массивы определяют значения координат точек
//на плоскости
float x[3]={1., 2., 3.};
float y[3]={3., 2., 1.};
printf("Вызываем функцию для нахождения расстояния от точек \n до начала координат\n");
for(int i=0; i<3; i++)
{
//При обращении к функции ей передается только одна
//точка
printf("%6.2f %6.2f, R=%6.2f\n", x[i],y[i],R(0,0,x[i],y[i]));
}

printf("\n=======\n");

return 0;
}	
